<?phpclass Config{    /**     * @var string     */    private $xml;    /**     * @var bool     */    private $invalide_cache;    /**     * @var array     */    private $kajak_kinds;    /**     * @var array     */    private $kajaks;    /**     * @var array     */    private $seats_per_kajak;    /**     * @var array     */    private $formatted_timeslots;    /**     * @var array     */    private $days;    /**     * @var array     */    private $formatted_days;    /**     * @var array     */    private $timeslots;    /**     * @var array     */    private $prices;    /**     * Constructor for Config class.     */    public function __construct()    {        /* read in from config.xml as string */        $loaded_xml = file_get_contents('config.xml');        if ($loaded_xml === FALSE) {            /* if it fails return */            return;        }        /* save xml string to variable */        $this->xml = $loaded_xml;        $this->invalidate_caches();    }    public function invalidate_caches(): void    {        $this->invalide_cache = TRUE;        $this->get_kajaks();        $this->get_kajak_kinds();        $this->get_seats_per_kajak();        $this->get_formatted_timeslots();        $this->get_timeslots();        $this->get_days();        $this->get_formatted_days();        $this->get_prices();        $this->invalide_cache = FALSE;    }    /**     * Get list of kajaks.     *     * @return array     */    public function get_kajaks(): array    {        if ($this->invalide_cache) {            $xml = $this->get_simple_xml_config();            $kajaks = array();            if ($xml !== NULL) {                /* prepare list of prices in which every price is an object with some props */                foreach ($xml->kajaks->children() as $child) {                    $kajak = new stdClass();                    $name = (string)$child->attributes()->name;                    $kajak->name = $name;                    /* get all props and put them as attributes into object */                    $props = $child->xpath('.//prop');                    foreach ($props as $prop) {                        $kajak->{(string)$prop->attributes()->name} = (string)$prop;                    }                    $kajaks [] = $kajak;                }            }            $this->kajaks = $kajaks;        }        return $this->kajaks;    }    /**     * Get xml string as SimpleXMLElement.     *     * @return SimpleXMLElement|null     */    private function get_simple_xml_config(): ?SimpleXMLElement    {        try {            return new SimpleXMLElement($this->xml);        } catch (Exception $e) {            return NULL;        }    }    /**     * Get all kajak kinds.     *     * @return array     */    public function get_kajak_kinds(): array    {        if ($this->invalide_cache) {            $this->kajak_kinds = array_unique(array_map(static function ($kajak) {                return $kajak->kind;            }, $this->get_kajaks()));        }        return $this->kajak_kinds;    }    /**     * Get seats per kajak kind.     *     * @return array     */    public function get_seats_per_kajak(): array    {        if ($this->invalide_cache) {            $this->seats_per_kajak = array_reduce($this->get_kajaks(), static function ($carry, $kajak) {                $carry[$kajak->kind] = (int)$kajak->seats;                return $carry;            }, array());        }        return $this->seats_per_kajak;    }    /**     * Get formatted timeslots.     *     * @return array     */    public function get_formatted_timeslots(): array    {        if ($this->invalide_cache) {            $this->formatted_timeslots = array_map(function ($timeslot) {                return $this->format_timeslots($timeslot);            }, $this->get_timeslots());        }        return $this->formatted_timeslots;    }    /**     * Formats multiple timeslots from e.g. [9:00, 13:00] to 9:00 - 13:00.     *     * @param $timeslot     * @return string     */    public static function format_timeslots($timeslot): string    {        return date('H:i', strtotime($timeslot["start"])) . " - " . date('H:i', strtotime($timeslot["end"]));    }    /**     * Get all timeslots from config.     * @return array     */    public function get_timeslots(): array    {        if ($this->invalide_cache) {            $xml = $this->get_simple_xml_config();            $timeslots = array();            if ($xml !== NULL) {                foreach ($xml->timeslots->children() as $child) {                    $start = (string)$child->start;                    $end = (string)$child->end;                    $name = (string)$child->attributes()->name;                    $timeslot = array();                    $timeslot["start"] = $start;                    $timeslot[0] = $start;                    $timeslot["end"] = $end;                    $timeslot[1] = $end;                    $timeslot["name"] = $name;                    $timeslots[] = $timeslot;                }            }            $this->timeslots = $timeslots;        }        return $this->timeslots;    }    /**     * Get config for days.     *     * @return array     */    public function get_days(): array    {        if ($this->invalide_cache) {            $xml = $this->get_simple_xml_config();            $day_config = array();            if ($xml !== NULL) {                $days = (array)$xml->days;                $day_config["min_days"] = (int)$days["min"];                $day_config["max_days"] = (int)$days["max"];            }            $this->days = $day_config;        }        return $this->days;    }    /**     * Returns the next max_days weekdays as a list of strings.     *     * @return array<string>     */    public function get_formatted_days(): array    {        if ($this->invalide_cache) {            $days = [''];            /* create starting date */            $date = date_create();            if ($date !== FALSE) {                $days_config = $this->get_days();                $min_days = $days_config['min_days'];                $max_days = $days_config['max_days'];                $weekdays = array('Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag');                /* add min_days to starting date */                date_add($date, new DateInterval("P${min_days}D"));                /* create array with all weekdays */                for ($i = 0; $i < $max_days; $i++) {                    $weekday = (int)$date->format('w');                    /* ignore saturday and sunday */                    if ($weekday !== 0 && $weekday !== 6) {                        $days[$i] = array($weekdays[$weekday] . ' ' . $date->format('d.m.Y'), $date->format('Y-m-d'));                    }                    date_add($date, new DateInterval("P1D"));                }            }            $this->formatted_days = $days;        }        return $this->formatted_days;    }    /**     * Return prices as list like     * ```json     * [{     *   "name": "single",     *   "price": "5"     * }, ...]     * ```     *     * @return array     */    public function get_prices(): array    {        if ($this->invalide_cache) {            $xml = $this->get_simple_xml_config();            $prices = array();            if ($xml !== NULL) {                /* prepare list of prices in which every price is an object with some props */                foreach ($xml->prices->children() as $child) {                    $price = array();                    $name = (string)$child->attributes()->name;                    $price["name"] = $name;                    /* get all props and put them as attributes into object */                    $props = $child->xpath('.//prop');                    foreach ($props as $prop) {                        $attrs = $prop->attributes();                        $prop_name = (string)$attrs->name;                        if ($prop_name === 'dependOn') {                            if (!array_key_exists('dependOn', $price)) {                                $price["dependOn"] = array();                            }                            $dependency = array(                                "amount" => (string)$attrs->amount,                                "name" => (string)$prop                            );                            /* add dependOn to price */                            $price["dependOn"][] = $dependency;                        } else {                            $price[$prop_name] = (string)$prop;                        }                    }                    /* decide between array or object */                    $prices[] = $price;                }            }            $this->prices = $prices;        }        return $this->prices;    }}